{
	"name": "PlayersTablesfirsttime",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dataplayersnew",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          id as short,",
				"          Player as string,",
				"          Pos as string,",
				"          Squad as string,",
				"          Age as string,",
				"          Club as string,",
				"          Born as integer,",
				"          MP as integer,",
				"          Starts as integer,",
				"          Min as integer,",
				"          {90s} as double,",
				"          Gls11 as double,",
				"          Ast12 as double,",
				"          {G-PK13} as double,",
				"          PK as double,",
				"          PKatt as double,",
				"          CrdY as double,",
				"          CrdR as double,",
				"          Gls18 as double,",
				"          Ast19 as double,",
				"          {G+A} as double,",
				"          {G-PK21} as double,",
				"          {G+A-PK} as double,",
				"          xG23 as double,",
				"          npxG24 as double,",
				"          xAG25 as double,",
				"          {npxG+xAG26} as double,",
				"          xG27 as double,",
				"          xAG28 as double,",
				"          {xG+xAG} as double,",
				"          npxG30 as double,",
				"          {npxG+xAG31} as double,",
				"          Matches as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     dateFormats: ['yyyy/MM/dd'],",
				"     timestampFormats: ['yyyy.MM.dd HH:mm:ss']) ~> source1",
				"source1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          createdDate as timestamp,",
				"          Id as integer,",
				"          Player as string,",
				"          Pos as string,",
				"          Squad as string,",
				"          Age as string,",
				"          Club as string,",
				"          Born as integer,",
				"          MP as integer,",
				"          Starts as integer,",
				"          Minutes_played as integer,",
				"          per_90s as double,",
				"          Gls as double,",
				"          Ast as double,",
				"          G_PK as double,",
				"          PK as double,",
				"          PKatt as double,",
				"          CrdY as double,",
				"          CrdR as double,",
				"          per90_Gls as double,",
				"          per90_Ast as double,",
				"          per90_G_A as double,",
				"          per90_G_PK as double,",
				"          per90_G_A_PK as double,",
				"          exp_xG as double,",
				"          exp_npxG as double,",
				"          exp_xAG as double,",
				"          exp_npxG_xAG as double,",
				"          per90_xG as double,",
				"          per90_xAG as double,",
				"          per90_xG_xAG as double,",
				"          per90_npxG as double,",
				"          per90_npxG_xAG as double,",
				"          Matches as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     dateFormat:'yyyy-MM-dd',",
				"     timestampFormat:'yyyy.MM.dd HH:mm:ss',",
				"     booleanFormat: ['1', '0'],",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id = id,",
				"          Player,",
				"          Pos,",
				"          Squad,",
				"          Age,",
				"          Club,",
				"          Born,",
				"          MP,",
				"          Starts,",
				"          Minutes_played = Min,",
				"          per_90s = {90s},",
				"          Gls = Gls11,",
				"          Ast = Ast12,",
				"          G_PK = {G-PK13},",
				"          PK,",
				"          PKatt,",
				"          CrdY,",
				"          CrdR,",
				"          per90_Gls = Gls18,",
				"          per90_Ast = Ast19,",
				"          per90_G_A = {G+A},",
				"          per90_G_PK = {G-PK21},",
				"          per90_G_A_PK = {G+A-PK},",
				"          exp_xG = xG23,",
				"          exp_npxG = npxG24,",
				"          exp_xAG = xAG25,",
				"          exp_npxG_xAG = {npxG+xAG26},",
				"          per90_xG = xG27,",
				"          per90_xAG = xAG28,",
				"          per90_xG_xAG = {xG+xAG},",
				"          per90_npxG = npxG30,",
				"          per90_npxG_xAG = {npxG+xAG31},",
				"          Matches",
				"     )) ~> sink1"
			]
		}
	}
}